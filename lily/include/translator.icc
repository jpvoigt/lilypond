/* -*- c++ -*-
  This file is part of LilyPond, the GNU music typesetter.

  Copyright (C) 2005--2015 Han-Wen Nienhuys <hanwen@xs4all.nl>

  LilyPond is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  LilyPond is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with LilyPond.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef TRANSLATOR_ICC
#define TRANSLATOR_ICC

#include "callback.hh"
#include "std-vector.hh"
#include "engraver.hh"

/*
  TODO: derive "foo-bar-interface" from Foo_bar classname.
 */

/**
   A macro to automate administration of translators.
*/
#define ADD_THIS_TRANSLATOR(T)                                          \
  SCM T::static_description_ = SCM_EOL;                                 \
  static void _ ## T ## _adder ()                                       \
  {                                                                     \
    T::boot ();                                                         \
    T *t = new T;                                                       \
    T::static_description_ =                                            \
      scm_permanent_object (t->static_translator_description ());       \
    add_translator (t);                                                 \
  }                                                                     \
  SCM T::translator_description () const                                \
  {                                                                     \
    return static_description_;                                         \
  }                                                                     \
  ADD_GLOBAL_CTOR (_ ## T ## _adder);                                   \
  /* end define */

#define DEFINE_TRANSLATOR_LISTENER_LIST(T) \
  Protected_scm T::listener_list_ (SCM_EOL)

#define DEFINE_ACKNOWLEDGERS(classname) \
  Drul_array<Protected_scm> classname::acknowledge_static_array_drul_;  \
  SCM                                                                   \
  classname::static_get_acknowledger (SCM sym, Direction start_end)     \
  {                                                                     \
    return generic_get_acknowledger                                     \
      (sym, acknowledge_static_array_drul_[start_end]);                 \
  }                                                                     \
  /* end define */

#define DEFINE_TRANSLATOR_DOC(classname, desc, grobs, read, write)              \
  SCM                                                                   \
  classname::static_translator_description () const                     \
  {                                                                     \
    return Translator::static_translator_description (grobs, desc, listener_list_, read, write); \
  }

#define ADD_TRANSLATOR(classname, desc, grobs, read, write)             \
  IMPLEMENT_FETCH_PRECOMPUTABLE_METHODS (classname);                    \
  DEFINE_ACKNOWLEDGERS(classname);                                      \
  ADD_THIS_TRANSLATOR (classname);                                      \
  DEFINE_TRANSLATOR_DOC(classname, desc, grobs, read, write);           \
  DEFINE_TRANSLATOR_LISTENER_LIST(classname);

#define IMPLEMENT_FETCH_PRECOMPUTABLE_METHODS(T)                        \
  void                                                                  \
  T::fetch_precomputable_methods (SCM ptrs[])                           \
  {                                                                     \
    ptrs[START_TRANSLATION_TIMESTEP] =                                  \
      method_finder <&T::start_translation_timestep> ();                \
									\
    ptrs[STOP_TRANSLATION_TIMESTEP] =					\
      method_finder <&T::stop_translation_timestep> ();                 \
                                                                        \
    ptrs[PROCESS_MUSIC] =						\
      method_finder <&T::process_music> ();                             \
									\
    ptrs[PROCESS_ACKNOWLEDGED] =					\
      method_finder <&T::process_acknowledged> ();                      \
  }

void add_acknowledger (SCM ptr,
                       char const *func_name,
                       SCM &ack_hash);

#define ADD_ACKNOWLEDGER_FOR(CLASS, NAME, GROB)                         \
  add_acknowledger (method_finder<&CLASS::acknowledge_ ## NAME> (),     \
                    #GROB, acknowledge_static_array_drul_[START])

#define ADD_ACKNOWLEDGER(CLASS, NAME) ADD_ACKNOWLEDGER_FOR (CLASS, NAME, NAME)

// ADD_END_ACKNOWLEDGER_FOR requires your NAME to actually be
// end_whatever if you are utilizing acknowledge_end_whatever as a
// different end acknowledger.
#define ADD_END_ACKNOWLEDGER_FOR(CLASS, NAME, GROB)                     \
  add_acknowledger (method_finder<&CLASS::acknowledge_ ## NAME> (),     \
                    #GROB, acknowledge_static_array_drul_[STOP])

#define ADD_END_ACKNOWLEDGER(CLASS, NAME)               \
  ADD_END_ACKNOWLEDGER_FOR (CLASS, end_ ## NAME, NAME)

/*
  Implement the method cl::listen_##m, and make it listen to stream
  events of class m.
 */
#define ADD_LISTENER_FOR(cl, m, ev)                                     \
  listener_list_ = scm_acons                                            \
    (event_class_symbol (#ev),                                          \
     method_finder<&cl::listen_ ## m> (),                               \
     listener_list_)

#define ADD_LISTENER(cl, m) ADD_LISTENER_FOR (cl, m, m)

#endif /* TRANSLATOR_ICC */
